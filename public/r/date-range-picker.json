{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "date-range-picker",
  "type": "registry:ui",
  "title": "Date Range Picker",
  "description": "A comprehensive date range picker component with predefined ranges and calendar selection",
  "dependencies": [
    "date-fns",
    "react-day-picker",
    "lucide-react"
  ],
  "registryDependencies": [
    "button",
    "calendar",
    "popover",
    "scroll-area",
    "select"
  ],
  "files": [
    {
      "path": "registry/new-york/ui/date-range-picker.tsx",
      "content": "\"use client\";\n\nimport * as React from \"react\";\nimport {\n  format,\n  startOfDay,\n  endOfDay,\n  subDays,\n  startOfMonth,\n  endOfMonth,\n  subMonths,\n  isValid,\n} from \"date-fns\";\nimport { CalendarIcon } from \"lucide-react\";\nimport { DateRange } from \"react-day-picker\";\n\nimport { cn } from \"@/lib/utils\";\nimport { Button } from \"@/components/ui/button\";\nimport { Calendar } from \"@/components/ui/calendar\";\nimport {\n  Popover,\n  PopoverContent,\n  PopoverTrigger,\n} from \"@/components/ui/popover\";\nimport { ScrollArea } from \"@/components/ui/scroll-area\";\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from \"@/components/ui/select\";\n\n/**\n * Predefined date range option\n */\nexport interface PredefinedRange {\n  /** Display label for the range option */\n  label: string;\n  /** Date range value */\n  value: DateRange;\n  /** Optional description for accessibility */\n  description?: string;\n}\n\n/**\n * Props for the DateRangePicker component\n */\nexport interface DateRangePickerProps {\n  /** Currently selected date range */\n  value?: DateRange;\n  /** Callback when date range changes */\n  onChange?: (range: DateRange | undefined) => void;\n  /** Additional CSS classes */\n  className?: string;\n  /** Placeholder text when no range is selected */\n  placeholder?: string;\n  /** Custom predefined date ranges */\n  predefinedRanges?: PredefinedRange[];\n  /** Whether to show predefined ranges section */\n  showPredefinedRanges?: boolean;\n  /** Whether to show calendar section */\n  showCalendar?: boolean;\n  /** Whether the picker is disabled */\n  disabled?: boolean;\n  /** Whether to close popover when clearing selection */\n  closeOnClear?: boolean;\n  /** Whether to apply selection immediately when predefined range is selected */\n  applyOnPredefinedSelect?: boolean;\n  /** Whether to clear selection immediately when clear button is clicked */\n  clearOnSelect?: boolean;\n  /** Minimum selectable date */\n  minDate?: Date;\n  /** Maximum selectable date */\n  maxDate?: Date;\n  /** Number of months to display in calendar */\n  numberOfMonths?: 1 | 2;\n  /** Button width (CSS class or explicit width) */\n  buttonWidth?: string;\n  /** Test ID for testing purposes */\n  \"data-testid\"?: string;\n}\n\n/**\n * Default predefined date ranges\n */\nconst defaultPredefinedRanges: PredefinedRange[] = [\n  {\n    label: \"Today\",\n    value: { from: startOfDay(new Date()), to: endOfDay(new Date()) },\n    description: \"Select today's date\",\n  },\n  {\n    label: \"Yesterday\",\n    value: {\n      from: startOfDay(subDays(new Date(), 1)),\n      to: endOfDay(subDays(new Date(), 1)),\n    },\n    description: \"Select yesterday's date\",\n  },\n  {\n    label: \"Last 7 Days\",\n    value: { from: subDays(new Date(), 6), to: new Date() },\n    description: \"Select the last 7 days\",\n  },\n  {\n    label: \"Last 30 Days\",\n    value: { from: subDays(new Date(), 29), to: new Date() },\n    description: \"Select the last 30 days\",\n  },\n  {\n    label: \"This Month\",\n    value: { from: startOfMonth(new Date()), to: endOfMonth(new Date()) },\n    description: \"Select the current month\",\n  },\n  {\n    label: \"Last Month\",\n    value: {\n      from: startOfMonth(subMonths(new Date(), 1)),\n      to: endOfMonth(subMonths(new Date(), 1)),\n    },\n    description: \"Select the previous month\",\n  },\n];\n\n/**\n * Validates if a date range is complete and valid\n */\nconst isValidDateRange = (range: DateRange | undefined): boolean => {\n  if (!range?.from || !range?.to) return false;\n  return isValid(range.from) && isValid(range.to) && range.from <= range.to;\n};\n\n/**\n * Compares two date ranges for equality\n */\nconst isRangeEqual = (\n  range1: DateRange | undefined,\n  range2: DateRange | undefined\n): boolean => {\n  if (!range1?.from || !range1?.to || !range2?.from || !range2?.to) {\n    return false;\n  }\n\n  return (\n    range1.from.toDateString() === range2.from.toDateString() &&\n    range1.to.toDateString() === range2.to.toDateString()\n  );\n};\n\nexport function DateRangePicker({\n  value,\n  onChange,\n  className,\n  placeholder = \"Select date range\",\n  predefinedRanges = defaultPredefinedRanges,\n  showPredefinedRanges = true,\n  showCalendar = true,\n  disabled = false,\n  closeOnClear = true,\n  applyOnPredefinedSelect = true,\n  clearOnSelect = true,\n  minDate,\n  maxDate = new Date(),\n  numberOfMonths = 2,\n  buttonWidth = \"min-w-[200px] max-w-[400px] w-auto\",\n  \"data-testid\": testId,\n}: DateRangePickerProps) {\n  const [open, setOpen] = React.useState(false);\n  const [tempRange, setTempRange] = React.useState<DateRange | undefined>(\n    value\n  );\n\n  // Sync temporary range with external value changes\n  React.useEffect(() => {\n    setTempRange(value);\n  }, [value]);\n\n  // Validation for date constraints\n  const isDateDisabled = React.useMemo(() => {\n    return (date: Date) => {\n      if (minDate && date < minDate) return true;\n      if (maxDate && date > maxDate) return true;\n      return false;\n    };\n  }, [minDate, maxDate]);\n\n  // Calendar default month calculation\n  const defaultMonth = React.useMemo(() => {\n    if (tempRange?.from) return tempRange.from;\n    if (value?.from) return value.from;\n    return subMonths(new Date(), 1);\n  }, [tempRange?.from, value?.from]);\n\n  // Event handlers with useCallback for performance\n  const handleRangeSelect = React.useCallback(\n    (range: DateRange | undefined) => {\n      setTempRange(range);\n    },\n    []\n  );\n\n  const handlePredefinedRangeSelect = React.useCallback(\n    (range: DateRange) => {\n      setTempRange(range);\n      if (applyOnPredefinedSelect) {\n        onChange?.(range);\n        setOpen(false);\n      }\n    },\n    [applyOnPredefinedSelect, onChange]\n  );\n\n  const handleApply = React.useCallback(() => {\n    // Only apply if range is valid or undefined\n    if (!tempRange || isValidDateRange(tempRange)) {\n      onChange?.(tempRange);\n      setOpen(false);\n    }\n  }, [tempRange, onChange]);\n\n  const handleClear = React.useCallback(() => {\n    setTempRange(undefined);\n    if (clearOnSelect) {\n      onChange?.(undefined);\n      if (closeOnClear) setOpen(false);\n    }\n  }, [clearOnSelect, onChange, closeOnClear]);\n\n  const handleOpenChange = React.useCallback(\n    (newOpen: boolean) => {\n      setOpen(newOpen);\n      // Reset temp range when closing without applying\n      if (!newOpen && !applyOnPredefinedSelect) {\n        setTempRange(value);\n      }\n    },\n    [value, applyOnPredefinedSelect]\n  );\n\n  // Format date range for display\n  const formatDateRange = React.useCallback(\n    (range: DateRange | undefined): string => {\n      if (!range?.from) {\n        return placeholder;\n      }\n      if (!range.to) {\n        return format(range.from, \"LLL dd, y\");\n      }\n      if (range.from.getTime() === range.to.getTime()) {\n        return format(range.from, \"LLL dd, y\");\n      }\n      return `${format(range.from, \"LLL dd, y\")} - ${format(\n        range.to,\n        \"LLL dd, y\"\n      )}`;\n    },\n    [placeholder]\n  );\n\n  // Check if a predefined range is currently selected\n  const isRangeSelected = React.useCallback(\n    (predefinedRange: DateRange) => {\n      return isRangeEqual(predefinedRange, tempRange);\n    },\n    [tempRange]\n  );\n\n  // Calendar component for desktop\n  const CalendarContent = React.memo(() => (\n    <div className=\"flex flex-col gap-4\">\n      <div className=\"flex-1\">\n        <Calendar\n          initialFocus\n          mode=\"range\"\n          defaultMonth={defaultMonth}\n          selected={tempRange}\n          onSelect={handleRangeSelect}\n          numberOfMonths={numberOfMonths}\n          className=\"rounded-md border\"\n          disabled={isDateDisabled}\n          showOutsideDays={false}\n          toMonth={maxDate}\n          fromMonth={minDate || subMonths(new Date(), 12)}\n        />\n      </div>\n      <div className=\"flex justify-end gap-2 px-4\">\n        <Button\n          variant=\"outline\"\n          size=\"sm\"\n          onClick={handleClear}\n          disabled={!tempRange}\n          aria-label=\"Clear date range selection\"\n        >\n          Clear\n        </Button>\n        <Button\n          size=\"sm\"\n          onClick={handleApply}\n          disabled={tempRange !== undefined && !isValidDateRange(tempRange)}\n          aria-label=\"Apply date range selection\"\n        >\n          Apply\n        </Button>\n      </div>\n    </div>\n  ));\n\n  // Calendar component for mobile\n  const MobileCalendarContent = React.memo(() => (\n    <div className=\"flex flex-col\">\n      <div className=\"flex-1\">\n        <Calendar\n          initialFocus\n          mode=\"range\"\n          defaultMonth={defaultMonth}\n          selected={tempRange}\n          onSelect={handleRangeSelect}\n          numberOfMonths={1}\n          className=\"rounded-md border\"\n          disabled={isDateDisabled}\n          showOutsideDays={false}\n          toMonth={maxDate}\n          fromMonth={minDate || subMonths(new Date(), 12)}\n        />\n      </div>\n      <div className=\"flex justify-end gap-2 pt-4\">\n        <Button\n          variant=\"outline\"\n          size=\"sm\"\n          onClick={handleClear}\n          disabled={!tempRange}\n          aria-label=\"Clear date range selection\"\n        >\n          Clear\n        </Button>\n        <Button\n          size=\"sm\"\n          onClick={handleApply}\n          disabled={tempRange !== undefined && !isValidDateRange(tempRange)}\n          aria-label=\"Apply date range selection\"\n        >\n          Apply\n        </Button>\n      </div>\n    </div>\n  ));\n\n  // Predefined ranges list\n  const PredefinedRangesContent = React.memo(() => (\n    <div className=\"space-y-1 max-h-full overflow-scroll\" role=\"list\">\n      {predefinedRanges.map((range) => {\n        const isSelected = isRangeSelected(range.value);\n        return (\n          <Button\n            key={range.label}\n            variant={isSelected ? \"secondary\" : \"ghost\"}\n            size=\"sm\"\n            className=\"w-full justify-start\"\n            onClick={() => handlePredefinedRangeSelect(range.value)}\n            aria-label={range.description || `Select ${range.label}`}\n            aria-pressed={isSelected}\n            role=\"listitem\"\n          >\n            {range.label}\n          </Button>\n        );\n      })}\n    </div>\n  ));\n\n  // Desktop layout\n  const DesktopContent = React.memo(() => {\n    if (!showPredefinedRanges && !showCalendar) {\n      return (\n        <div className=\"p-4 text-center text-muted-foreground\">\n          No content to display\n        </div>\n      );\n    }\n    if (!showPredefinedRanges) {\n      return (\n        <div className=\"p-4\">\n          <CalendarContent />\n        </div>\n      );\n    }\n    if (!showCalendar) {\n      return (\n        <div className=\"p-4 w-48\">\n          <PredefinedRangesContent />\n        </div>\n      );\n    }\n    // Both shown\n    return (\n      <div className=\"relative\">\n        <div className=\"absolute inset-y-0 left-0 w-48 border-r p-4 flex flex-col overflow-auto\">\n          <h4 className=\"mb-4 text-sm font-semibold\">Quick Select</h4>\n          <ScrollArea className=\"flex-1 pr-3\">\n            <PredefinedRangesContent />\n          </ScrollArea>\n        </div>\n        <div className=\"ml-48 p-4\">\n          <CalendarContent />\n        </div>\n      </div>\n    );\n  });\n\n  // Mobile layout\n  const MobileContent = React.memo(() => {\n    const isQuickSelectOnly = showPredefinedRanges && !showCalendar;\n\n    return (\n      <div className=\"w-full\">\n        {showPredefinedRanges && showCalendar && (\n          <div className=\"px-4 pt-4\">\n            <Select\n              onValueChange={(value) => {\n                const selectedRange = predefinedRanges.find(\n                  (range) => range.label === value\n                );\n                if (selectedRange) {\n                  handlePredefinedRangeSelect(selectedRange.value);\n                }\n              }}\n              aria-label=\"Quick select date range\"\n            >\n              <SelectTrigger className=\"w-full\">\n                <SelectValue placeholder=\"Quick select range\" />\n              </SelectTrigger>\n              <SelectContent>\n                {predefinedRanges.map((range) => (\n                  <SelectItem\n                    key={range.label}\n                    value={range.label}\n                    aria-label={range.description}\n                  >\n                    {range.label}\n                  </SelectItem>\n                ))}\n              </SelectContent>\n            </Select>\n          </div>\n        )}\n        {isQuickSelectOnly && (\n          <div className=\"p-4\">\n            <PredefinedRangesContent />\n          </div>\n        )}\n        {showCalendar && (\n          <div className=\"p-4\">\n            <MobileCalendarContent />\n          </div>\n        )}\n        {!showCalendar && !showPredefinedRanges && (\n          <div className=\"p-4 text-center text-muted-foreground\">\n            No content to display\n          </div>\n        )}\n      </div>\n    );\n  });\n\n  return (\n    <div className={cn(\"grid gap-2\", className)} data-testid={testId}>\n      <Popover open={open} onOpenChange={handleOpenChange}>\n        <PopoverTrigger asChild>\n          <Button\n            id=\"date-range-picker\"\n            variant=\"outline\"\n            className={cn(\n              buttonWidth,\n              \"justify-start text-left font-normal\",\n              !value && \"text-muted-foreground\",\n              disabled && \"cursor-not-allowed opacity-50\"\n            )}\n            disabled={disabled}\n            aria-label={`Date range picker: ${formatDateRange(value)}`}\n            aria-expanded={open}\n            aria-haspopup=\"dialog\"\n            data-testid={testId ? `${testId}-trigger` : undefined}\n          >\n            <CalendarIcon\n              className=\"mr-2 h-4 w-4 flex-shrink-0\"\n              aria-hidden=\"true\"\n            />\n            <span className=\"truncate\">{formatDateRange(value)}</span>\n          </Button>\n        </PopoverTrigger>\n        <PopoverContent\n          className={cn(\n            \"p-0\",\n            // For mobile quick select only, use constrained width\n            showPredefinedRanges && !showCalendar ? \"w-48 md:w-auto\" : \"w-auto\"\n          )}\n          align=\"end\"\n          sideOffset={4}\n          role=\"dialog\"\n          aria-label=\"Date range picker\"\n        >\n          <div className=\"hidden md:block\">\n            <DesktopContent />\n          </div>\n          <div className=\"md:hidden\">\n            <MobileContent />\n          </div>\n        </PopoverContent>\n      </Popover>\n    </div>\n  );\n}\n\n// Add display name for easier debugging\nDateRangePicker.displayName = \"DateRangePicker\";\n\n// Export types for external use\nexport type { DateRange } from \"react-day-picker\";\n",
      "type": "registry:ui"
    }
  ]
}